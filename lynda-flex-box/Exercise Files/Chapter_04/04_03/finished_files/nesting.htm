<!doctype html>
<html>
<head>
<meta charset="UTF-8">
<title>Nesting flex items</title>
<link href="_css/base.css" rel="stylesheet" type="text/css" media="screen">
<style>
body {
	width: 80%;
	margin: 0 auto;
	padding: 2%;
	line-height: 1.6;
}
.flex-container {
	display:-webkit-flex;
	display: -ms-flexbox;
	display: flex;
	margin: 1em 0;
	border: 1px solid #333;
}
.one {
	-webkit-order: 1;
	-ms-flex-order: 1;
	order: 1;
}
.two {
	-webkit-order: 4;
	-ms-flex-order: 4;
	order: 4;
}
.three {
	-webkit-order: 3;
	-ms-flex-order: 3;
	order: 3;
}
.four {
	-webkit-order: 0;
	-ms-flex-order: 0;
	order: 0;
}
.nest {
	-webkit-flex-flow: column;
	-ms-flex-flow: column;
	flex-flow: column;
}
.nest-four {
	-webkit-order: -1;
	-ms-flex-order: -1;
	order: -1;
}
</style>
</head>
<body>
<header>
<h1>Flexbox First Look</h1>
<p>Welcome to Flexbox First Look! The <a href="http://www.w3.org/TR/css3-flexbox/" title="Flexbox">Flexible Layout Box Model</a> (or <strong>Flexbox</strong> as it is more commonly known) is <em>just one of the many</em> CSS specifications under development by the W3C to address the current shortcomings in layout capabilities. Flexbox is well suited for arranging and aligning elements along a single axis, and creating flexible elements within a defined container. It's not particularly good at handling complex layouts, or controlling elements along multiple axes. As such, it's likely that Flexbox will be used in conjunction with other layout models such as <a href="http://www.w3.org/TR/css3-grid-layout/" title="CSS Grid Layout">CSS Grid Layout</a>. While layout models like Grid Layout will handle overall page organization, Flexbox will be used to control the layout of discreet regions or UI components.</p>
</header>
<article>
<h2>Nesting flex items</h2>
<p>Flex items can also be flex containers, which allows you to nest flex containers as much as you'd like. Each flex container has its own flex flow as well as its own display order. This means that the <strong>order</strong> property only effects flex items within the same container.</p>
<section class="flex-container">
<div class="box one">
<h3>one</h3>
</div>
<div class="box two">
<h3>two</h3>
<section class="flex-container nest">
<div class="box nest-one">
<h3>one</h3>
</div>
<div class="box nest-two">
<h3>two</h3>
</div>
<div class="box nest-three">
<h3>three</h3>
</div>
<div class="box nest-four">
<h3>four</h3>
</div>
</div>
<div class="box three">
<h3>three</h3>
</div>
<div class="box four">
<h3>four</h3>
</div>
</section>
</article>
</body>
</html>
