<!doctype html>
<html>
<head>
<meta charset="UTF-8">
<title>Margins in Flexbox</title>
<link href="_css/base.css" rel="stylesheet" type="text/css" media="screen">
<style>
body {
	width: 80%;
	margin: 0 auto;
	padding: 2%;
	line-height: 1.6;
}
.flex-container {
	display:-webkit-flex;
	display: -ms-flexbox;
	display: flex;
	margin: 1em 0;
	border: 1px solid #333;
	height: 400px;
	-webkit-justify-content: flex-start;
	-ms-flex-pack: start;
	justify-content: flex-start;
}
.box {
	margin: 20px;
}
.right {
	margin-left: auto;
}
</style>
</head>
<body>
<header>
<h1>Flexbox First Look</h1>
<p>Welcome to Flexbox First Look! The <a href="http://www.w3.org/TR/css3-flexbox/" title="Flexbox">Flexible Layout Box Model</a> (or <strong>Flexbox</strong> as it is more commonly known) is <em>just one of the many</em> CSS specifications under development by the W3C to address the current shortcomings in layout capabilities. Flexbox is well suited for arranging and aligning elements along a single axis, and creating flexible elements within a defined container. It's not particularly good at handling complex layouts, or controlling elements along multiple axes. As such, it's likely that Flexbox will be used in conjunction with other layout models such as <a href="http://www.w3.org/TR/css3-grid-layout/" title="CSS Grid Layout">CSS Grid Layout</a>. While layout models like Grid Layout will handle overall page organization, Flexbox will be used to control the layout of discreet regions or UI components.</p>
</header>
<article>
<h2>Flex item margins</h2>
<p>When aligning, sizing, and spacing items, it is important to understand how margins are treated in Flexbox. Unlike block-level elements, the vertical margins of adjacent flex items do not collapse. This can lead to unintended spacing between elements. It's also important to note that margins applied to flex items are counted as part of the elements main size. This can affect items using the flex property. Unless you specifically need them, I recommend not setting margins on flex items.</p>
<p>There is one specific case where margins can be very effective when used with flex items. When used with the <strong>justify-content</strong> and <strong>align-self</strong> properties, any positive free space is distributed first to auto margins in that direction. This means that you can use auto margins to align elements to the opposite edge of their containers without using additional properties.</p>
<section class="flex-container">
<div class="box">
<h3>one</h3>
</div>
<div class="box flex1">
<h3>two</h3>
</div>
<div class="box">
<h3>three</h3>
</div>
<div class="box right">
<h3>four</h3>
</div>
</section>
</article>
</body>
</html>
